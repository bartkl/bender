#!/usr/bin/env python2
from mutagen.flac import FLAC
from mutagen.id3 import ID3
import sys
import os
import errno
import shutil

""" Config """

LIBRARY = u'/volume1/music/library'
VIRTUAL_LIBRARY = u'/volume1/music/vfs'


""" Definitions """

def create_virtual_lib():
        try:
            shutil.rmtree(VIRTUAL_LIBRARY)
        except OSError:
            print "Nothing to be deleted."
        os.makedirs(VIRTUAL_LIBRARY)
    
        for root, dirs, files in os.walk(LIBRARY):
            genres = None
            if root.count(os.sep) == LIBRARY.count(os.sep) + 1:
                del dirs[:] # Ensure that subdirectories in albums are not scanned.
            for file_ in files:
                if file_.lower().endswith('.flac'):
                    audiofile = FLAC(os.path.join(root, file_))
                    if 'genre' in audiofile:
                        genres = audiofile['genre']
                    else:
                        genres = ['Miscellaneous']
                    if 'style' in audiofile:
                        styles = audiofile['style']
                    else:
                        styles = ['Miscellaneous']
                    break
                elif file_.lower().endswith('.mp3'):
                    audiofile = ID3(os.path.join(root, file_))
                    if 'TCON' in audiofile:
                        genres = audiofile['TCON']
                    else:
                        genres = ['Miscellaneous']
                    if u'TXXX:QuodLibet::style' in audiofile:
                        styles = audiofile[u'TXXX:QuodLibet::style']
                    else:
                        styles = ['Miscellaneous']
                    break
                else:
                    continue

            if genres is None: # If this occurs, apparently no mp3 or flac files were found, so no symbolic link should be created.
                continue
            
            for genre in genres:
                for style in styles:
                    try:
                        genredir = os.path.join(VIRTUAL_LIBRARY, genre, style)
                        os.makedirs(genredir)
                    except OSError as exception:
                        if exception.errno != errno.EEXIST:
                            raise
                    try:
                        os.symlink(root, os.path.join(genredir, os.path.basename(root)))
                    except OSError as exception:
                        if exception.errno != errno.EEXIST:
                            raise


""" Main """

if __name__ == '__main__':
    create_virtual_lib()
