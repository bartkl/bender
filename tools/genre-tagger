#!/usr/bin/env python3
# vim: set et ts=4 sw=4 sts=4:

import sys
import os
import subprocess
import sqlite3
import time

CONFIG = {
    'beets db': '/media/nastynas/homes/bart/.config/beets/library_test.db',
    'beets path base': '/volume1/music',
    'genre blacklist': [],
    'genre delimiter': ',',
    'roots': [
        '/media/nastynas/music',
        '/home/bart/Desktop/vfs',
    ],
}

def _exit(retcode, msg=None):
    if msg:
        print(msg)
    sys.exit(retcode)

def fetch_genres(conn, blacklist=[]):
    genre_choices = []

    c = conn.cursor()
    c.execute('''
        select distinct
            genre
        from albums

        order by genre asc
    ''')

    for genres, in c:
        if not genres:
            continue
        for genre in genres.split(','):
            if not genre in blacklist and\
               not genre in genre_choices:
               genre_choices.append(genre)

    return sorted(genre_choices)

def fetch_albums(conn):
    albums = {}

    c = conn.cursor()
    c.execute('''
        select
            albums.id,
            albums.genre,
            items.path
        from albums

        inner join items
        on albums.id = items.album_id

        group by album_id
        ''')

    for id_, genres, path in c:
        album_path = os.path.dirname(path)
        albums[album_path] = {
            'id': id_,
            'genres': genres.split(CONFIG['genre delimiter'])
        }
    return albums

def select_genres(genres,
                  selected_genres=[]):
    genre_fields = []
    for genre in genres:
        if genre in selected_genres:
            default_value = 'TRUE'
        else:
            default_value = 'FALSE'
        genre_fields.extend(['--field', '{}:CHK'.format(genre), default_value])

    cmd_args = ['yad',
                '--form',
                '--scroll',
                '--height', '700',
                '--posx', '200',
                '--posy', '100',
                '--width', '1360',
                '--columns=4']
    cmd_args.extend(genre_fields)
    yad_proc = subprocess.run(cmd_args, stdout=subprocess.PIPE)  # Deliberately
                                                                 # blocking.
    yad_proc_output = yad_proc.stdout\
                    .decode('utf8')\
                    .strip('\n')\
                    .split('|')
    chosen_genres = CONFIG['genre delimiter'].join([
            genres[index] for index, genre in enumerate(yad_proc_output)
                                           if genre == "TRUE"
    ])
    if not chosen_genres:
        _exit(0)
    return chosen_genres

def get_album_path(album_dir):
    album_dir = os.path.normpath(album_dir)
    # Resolve potential symlinking.
    first_file = os.path.join(album_dir, os.listdir(album_dir)[0])
    if os.path.islink(first_file):
        actual_first_file = os.readlink(first_file)
        album_dir = os.path.dirname(actual_first_file)

    # Search for occurrence of known root.
    for root in CONFIG['roots']:
        if album_dir.startswith(root):
            break
    else:
        _exit(1, "Album directory `{}' has an unknown base.".format(album_dir))

    return CONFIG['beets path base'] + album_dir.split(root)[1]

def get_genres_in_albums(all_genres, albums):
    return list(set(
        [genre for genre in [album['genres']
                         for album in albums.values()]
                             for genre in genre]))
    # Thanks: https://stackoverflow.com/a/952952/793458

def update_album_genres(conn, albums, genres):
    album_ids = [album['id'] for album in albums.values()]
    params = [genres] + album_ids
    c = conn.cursor()
    c.execute('''
        update albums
        set genre = ?
        where id in ({})
    '''.format(', '.join('?' for _ in album_ids)),
    params)
    conn.commit()



if __name__ == '__main__':
    conn = sqlite3.connect(CONFIG['beets db'])
    all_albums = fetch_albums(conn)
    all_genres = fetch_genres(conn)
    album_dirs = [get_album_path(album_dir) for album_dir in sys.argv[1:]]
    albums = {path: all_albums[path] for path in album_dirs
                                     if path in all_albums}
    genres = get_genres_in_albums(all_genres, albums)
    selected_genres = select_genres(all_genres, genres)
    update_album_genres(conn, albums, selected_genres)
